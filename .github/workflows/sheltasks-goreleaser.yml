name: ShelTasks (GoReleaser)
on:
  push:
    paths:
      - .github/workflows/sheltasks-goreleaser.yml # when the workflow file changes
      - sheltasks-cli/** # source code, goreleaser and golangci-lint config
    branches: ['main']
    tags-ignore: ['sheltasks-cli/*', '*nightly']
  pull_request:
    branches: ['main']
    paths:
      - sheltasks-cli/** # source code, goreleaser and golangci-lint config
concurrency:
  group: goreleaser-${{ github.ref_name }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true
permissions:
  contents: write
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository üì•
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Checkout chocolatey/choco üì•
        uses: actions/checkout@v4.1.1
        with:
          repository: chocolatey/choco
          path: ${{ github.workspace }}/sheltasks-cli/choco
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/setup-go@v5.3.0
        with:
          check-latest: true
          go-version-file: ./sheltasks-cli/go.mod
          cache-dependency-path: ./sheltasks-cli/go.sum
          cache: true

      - name: Chocolatey üç´üì¶
        if: github.ref_type == 'tag' && github.event_name == 'push'
        run: |
          chmod +x *.sh
          # prevent choco build to calculate version from tag of main repository
          unset GITHUB_REF GITHUB_BASE_REF GITHUB_HEAD_REF
          ./build.sh --configuration=ReleaseOfficial
          cp docker/choco_wrapper code_drop/temp/_PublishedApps/choco/choco_wrapper
          cp -r ./code_drop/temp/_PublishedApps/choco/ /opt/chocolatey
          mkdir /opt/chocolatey/lib
          cp /opt/chocolatey/choco_wrapper /usr/local/bin/choco
          cp /opt/chocolatey/choco_wrapper /usr/local/bin/choco.exe
        working-directory: ${{ github.workspace }}/sheltasks-cli/choco

      - name: Install cosign üìù‚úçÔ∏è
        if: github.event_name == 'push'
        run: |
          $env:COSIGN_KEY | Out-File -FilePath $env:GITHUB_WORKSPACE/sheltasks-cli/cosign.key -Encoding utf8
          go install github.com/sigstore/cosign/v2/cmd/cosign@latest
        env:
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
        shell: pwsh

      - name: Get GitHub bot token ü§ñüîê
        if: github.event_name == 'push'
        run: |
          Function Get-GitHubBotToken {
            $PkeyBytes = [System.Convert]::FromBase64String(($env:BOT_PVT_KEY -Replace '-{5}.*-{5}', '' -Replace '\r?\n', ''))
            $PrivateKey = [System.Security.Cryptography.RSA]::Create()
            $PrivateKey.ImportRSAPrivateKey($PkeyBytes, [ref] $Null)
            $Base64Header = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('{"alg":"RS256","typ":"JWT"}'))
            $Base64Payload = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes((ConvertTo-Json -Compress -InputObject @{
                            'iat' = [System.DateTimeOffset]::UtcNow.ToUnixTimeSeconds() - 60; # issued 60 seconds ago to allow for clock drift
                            'exp' = [System.DateTimeOffset]::UtcNow.ToUnixTimeSeconds() + 60 * 2; # expires in 2 minutes
                            'iss' = $env:BOT_APP_ID;
                        })))
            $Signature = $PrivateKey.SignData([System.Text.Encoding]::UTF8.GetBytes("$Base64Header.$Base64Payload"), 'SHA256', [Security.Cryptography.RSASignaturePadding]::Pkcs1)
            $Base64Signature = [System.Convert]::ToBase64String($Signature)
            return (Invoke-RestMethod -Uri https://api.github.com/app/installations/$env:BOT_INST_ID/access_tokens -Method Post -Headers @{
                    'Authorization' = "Bearer $Base64Header.$Base64Payload.$Base64Signature"
                    'Accept'        = 'application/vnd.github.machine-man-preview+json'
                }).token
          }
          "token=$(Get-GitHubBotToken)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        env:
          BOT_PVT_KEY: ${{ secrets.PRIVATE_KEY }}
          BOT_APP_ID: ${{ secrets.APP_ID }}
          BOT_INST_ID: ${{ secrets.BOT_INST_ID }}
        id: get-bot-token
        shell: pwsh

      - name: Run GoReleaser (build-only) üèóÔ∏èüöß
        if: github.event_name == 'pull_request'
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          distribution: goreleaser
          args: build --clean
          workdir: sheltasks-cli

      - name: Run GoReleaser (stable) üöÄ
        if: github.ref_type == 'tag' && github.event_name == 'push'
        uses: goreleaser/goreleaser-action@v6
        with:
          version: nightly
          distribution: goreleaser
          args: release --clean
          workdir: sheltasks-cli
        env:
          HOMEBREW_TOKEN: ${{ steps.get-bot-token.outputs.token }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PWD }}
          CHOCOLATEY_API_KEY: ${{ secrets.CHOCOLATEY_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      - name: Prefix tag with sheltasks-cli/ (stable) üë®‚Äçüîßüè∑Ô∏è
        if: github.ref_type == 'tag' && github.event_name == 'push'
        run: |
          api_url=$(gh release view "$TAG_NAME" --json apiUrl --jq '.apiUrl')
          gh api --method PATCH \
            /repos/$GITHUB_REPOSITORY/releases/$(basename $api_url) \
            --field name="ShelTasks CLI $TAG_NAME" \
            --field tag_name=sheltasks-cli/$TAG_NAME \
            --field draft=false \
            --field prerelease=false
          gh api --method DELETE /repos/$GITHUB_REPOSITORY/git/refs/tags/$TAG_NAME
        env:
          TAG_NAME: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      - name: Get nightly tag üåô
        if: github.ref_type == 'branch' && github.event_name == 'push'
        run: |
          latest_tag=$(git tag --list sheltasks-cli/v* | head -n1 | sed 's/sheltasks-cli\///g')
          new_tag=$(echo $latest_tag | awk -F. -v OFS=. '{$2++; $3=0; print}')
          echo "tag=$new_tag-nightly" >> $GITHUB_OUTPUT
          git tag $new_tag-nightly
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: get-nightly-tag

      - name: Run GoReleaser üåúnightlyüåõ
        if: github.ref_type == 'branch' && github.event_name == 'push'
        uses: goreleaser/goreleaser-action@v6
        with:
          version: nightly
          distribution: goreleaser
          args: release --clean --skip=announce,chocolatey,winget
          workdir: sheltasks-cli
        env:
          GORELEASER_CURRENT_TAG: ${{ steps.get-nightly-tag.outputs.tag }}
          HOMEBREW_TOKEN: ${{ steps.get-bot-token.outputs.token }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PWD }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN }}

      - name: Move release to nightly tag üåù
        if: github.ref_type == 'branch' && github.event_name == 'push'
        run: |
          gh release delete sheltasks-cli/nightly --cleanup-tag --yes
          api_url=$(gh release view "$NIGHTLY_TAG" --json apiUrl --jq '.apiUrl')
          gh api --method PATCH \
            /repos/$GITHUB_REPOSITORY/releases/$(basename $api_url) \
            --field name="ShelTasks CLI (Nightly) üåù" \
            --field tag_name=sheltasks-cli/nightly \
            --field draft=false \
            --field prerelease=true
          gh api --method DELETE /repos/$GITHUB_REPOSITORY/git/refs/tags/$NIGHTLY_TAG
        env:
          NIGHTLY_TAG: ${{ steps.get-nightly-tag.outputs.tag }}
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
